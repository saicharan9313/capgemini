// question 1


import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;
import java.util.ArrayList;

/*
Setup:
Create the following classes:
class Fruit { String name; int calories; int price; String color; }
Display the following:
1. Display the fruit names of low calories fruits i.e. calories < 100 sorted in descending order of calories.
2. Display color wise list of fruit names.
3. Display only RED color fruits sorted as per their price in ascending order.*/

class Fruit{
	private String name;
	private int calories;
	private int price;
	private String color;
	Fruit(){
		
	}
	public Fruit(String name, int calories, int price, String color) {
		super();
		this.name = name;
		this.calories = calories;
		this.price = price;
		this.color = color;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getCalories() {
		return calories;
	}
	public void setCalories(int calories) {
		this.calories = calories;
	}
	public int getPrice() {
		return price;
	}
	public void setPrice(int price) {
		this.price = price;
	}
	public String getColor() {
		return color;
	}
	public void setColor(String color) {
		this.color = color;
	}
	@Override
	public String toString() {
		return "Fruit{name=" + "'"+name + "'"+", calories=" + calories + ", price=" + price + ", color=" +  "'"+color +"'"+ "}";
	}
	
}
class MySort implements Comparator <Fruit> {

    @Override
    public int compare(Fruit f1, Fruit f2) {
        if(f1.getPrice()<f2.getPrice()) {
        	return 1;
        }else
        	return -1;
    }
}

public class Assignment5Q1 {

    public static List<String> reverseSort(ArrayList<Fruit> fruits) {
    	//Collections.sort(fruits,Collections.reverseOrder());
    	/*List<String> frNames = new ArrayList<>();
    	for(Fruit f:fruits) {
    		frNames.add(f.getName());
    	}
    	Collections.sort(frNames,Collections.reverseOrder());
    	frNames.add("Testing Name for Debug");
    	return frNames;*/
    	ArrayList<Fruit> fs = new ArrayList<>();
    	fs = (ArrayList<Fruit>)fruits.stream().filter(i->i.getCalories()<100)
    			.sorted((f1,f2)->f2.getCalories()-f1.getCalories())
    			.collect(Collectors.toList());
    	fs.stream().sorted();
    	List<String> rList = new ArrayList<String>();
    	fs.stream().forEach(i->{rList.add(i.getName());});
    	return rList;
    }
    public static ArrayList<Fruit> sort(ArrayList<Fruit> fruits) {
    	
    	/*List<Fruit> fs = fruits.stream().sorted((f1,f2)->f1.getName().compareTo(f2.getName())).collect(Collectors.toList());
    	ArrayList<Fruit> ffruits = new ArrayList<>(fs);
    	return ffruits;*/
    	//Portal is evaluating on Color sorting
        List<Fruit> cfruits = new ArrayList<>();
    	
    	cfruits = fruits.stream().sorted((f1,f2)->f1.getColor().compareTo(f2.getColor())).collect(Collectors.toList());
    	
    	return (ArrayList<Fruit>)cfruits;
    }

    public static ArrayList<Fruit> filterRedSortPrice(ArrayList<Fruit> fruits){
    	ArrayList<Fruit> redFruits;
    	/*fruits.stream().filter(i->i.getColor().equalsIgnoreCase("Red")).forEach(j->{
    		redFruits.add(j);
    	});*/
    	List<Fruit> tf = fruits.stream().filter(i->i.getColor().equalsIgnoreCase("Red"))
    	.sorted((f1,f2)->f1.getPrice()-f2.getPrice()).collect(Collectors.toList());
    	redFruits = new ArrayList<>(tf);
    	//Collections.sort(redFruits, new MySort());
    	return redFruits;
    }
    public static ArrayList<Fruit> lowCaloryFruits(ArrayList<Fruit> fruits){
    	ArrayList<Fruit> fs = new ArrayList<>();
    	fs = (ArrayList<Fruit>)fruits.stream().filter(i->i.getCalories()<100)
    			.sorted((f1,f2)->f2.getCalories()-f1.getCalories())
    			.collect(Collectors.toList());
    	fs.stream().sorted();
    	return fs;
    }
    /*public static List<Fruit> colorWiseFruitNames(ArrayList<Fruit> fruits){
    	
    	List<Fruit> cfruits = new ArrayList<>();
    	
    	cfruits = fruits.stream().sorted((f1,f2)->f1.getColor().compareTo(f2.getColor())).collect(Collectors.toList());
    	
    	return cfruits;
    }*/
    public static void main(String[] args) {
    	Fruit f1 = new Fruit("Guava",500,5,"Green");
    	Fruit f2 = new Fruit("Orange",30,10,"Orange");
    	Fruit f3 = new Fruit("Apple",90,6,"Red");
    	Fruit f4 = new Fruit("Soki",160,120,"Red");
    	Fruit f5 = new Fruit("Loki",85,20,"Red");
    	Fruit f6 = new Fruit("Moki",200,50,"Blue");
    	Fruit f7 = new Fruit("Blue Berry",150,15,"Blue");
    	Fruit f8 = new Fruit("Wine Grape",80,10,"Black");
    	ArrayList<Fruit> fruits = new ArrayList<>();
    	fruits.add(f1);
    	fruits.add(f2);
    	fruits.add(f3);
    	fruits.add(f4);
    	fruits.add(f5);
    	fruits.add(f6);
    	fruits.add(f7);
    	fruits.add(f8);
    	//1. LowCaloryFruits and print
    	System.out.println("LowCaloryFruits descending order of their Calories");
    	ArrayList<Fruit> fs = lowCaloryFruits(fruits);
    	fs.stream().forEach(i->System.out.println(i));
    	System.out.println();
    	//sort and print
    	System.out.println("Sorted on Color");
    	ArrayList<Fruit> fs1 = sort(fruits);
    	fs1.stream().forEach(i->System.out.println(i));
    	System.out.println();
    	System.out.println("Filtered Red and sorted on price");
    	ArrayList<Fruit> fs2 = filterRedSortPrice(fruits);
    	fs2.stream().forEach(i->System.out.println(i));
    	System.out.println();
    	//System.out.println("Color wise sorted fruits");
    	//List<Fruit> fs3 = colorWiseFruitNames(fruits);
    	//fs3.stream().forEach(i->System.out.println(i));
    	//System.out.println();
    	System.out.println("Reverse Sorted");
    	List<String> fs4 = reverseSort(fruits);
    	fs4.stream().forEach(i->System.out.println(i));
    	
    }

}




//question 2


import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.stream.Collectors;

/*
 * Setup:
   Create the following classes:
   class News { int newsId; String postedByUser; String commentByUser; String comment; }
   
   *
   *Find Out:
	1. Find out the newsId which has received maximum comments.
	
	2. Find out how many times the word 'budget' arrived in user comments all news.
	
	3. Find out which user has posted maximum comments.
	
	4. Display commentByUser wise number of comments.
*/
class News {
    private int newsId;
    private String postedByUser;
    private String commentByUser;
    private String comment;
    public News() {
    	
    }
	public News(int newsId, String postedByUser, String commentByUser, String comment) {
		super();
		this.newsId = newsId;
		this.postedByUser = postedByUser;
		this.commentByUser = commentByUser;
		this.comment = comment;
	}
	public int getNewsId() {
		return newsId;
	}
	public void setNewsId(int newsId) {
		this.newsId = newsId;
	}
	public String getPostedByUser() {
		return postedByUser;
	}
	public void setPostedByUser(String postedByUser) {
		this.postedByUser = postedByUser;
	}
	public String getCommentByUser() {
		return commentByUser;
	}
	public void setCommentByUser(String commentByUser) {
		this.commentByUser = commentByUser;
	}
	public String getComment() {
		return comment;
	}
	public void setComment(String comment) {
		this.comment = comment;
	}
	@Override
	public String toString() {
		return "News [newsId=" + newsId + ", postedByUser=" + postedByUser + ", commentByUser=" + commentByUser
				+ ", comment=" + comment + "]";
	}
    
}

public class Assignment5Q2 {
    public static int maxComments(List<News> news) {
    	Optional<News> comments = news.stream().max(Comparator.comparing(News::getComment));
    	//int cOfs =(int) comments.stream().count();
    	List<Integer> it = new ArrayList<>();
    	comments.stream().forEach(i->{int id =i.getNewsId(); it.add(id);});
    	int i = it.stream().findFirst().get();
    	return i;
    	
    }

    public static int budgetCount (List < News > news) {
    	//int c = (int) news.stream().filter(i->i.getCommentByUser().contains("budget")).count();
    	//return c;
    	int count = 0;
    	List<String> allComments = new ArrayList<>();
    	news.stream().forEach(i->allComments.add(i.getComment()));
    	for(String s:allComments) {
    		if(s.contains("budget")) {
    			count++;
    		}
    	}
    	return count;
    }
    public static String maxCommentsByUser (List < News > news) {
    	
    	Optional<News> toSL = news.stream().min(Comparator.comparing(News::getCommentByUser));  //max is not working here
    	List<String> userNames = new ArrayList<>(); 
    	toSL.stream().forEach(j->userNames.add(j.getCommentByUser()));
    	String finalName = userNames.stream().findFirst().get();
    	return finalName;
    }
    //below method is to sort treemap based on values
    public static <K, V extends Comparable<V>> Map<K, V> 
    sortByValues(final Map<K, V> map) {
    Comparator<K> valueComparator = 
             new Comparator<K>() {
      public int compare(K k1, K k2) {
        int compare = 
              map.get(k2).compareTo(map.get(k1));
        if (compare == 0) 
          return 1;
        else 
          return compare;
      }
    };
 
    Map<K, V> sortedByValues = 
      new TreeMap<K, V>(valueComparator);
    sortedByValues.putAll(map);
    return sortedByValues;
  }

    public static Map<String, Integer> sortMaxCommentsByUser (List < News > news) {
    	/*TreeSet<String> users = new TreeSet<>();
    	Map<String,Integer> uc = new TreeMap<>();
    	news.stream().forEach(i->{String nam = i.getCommentByUser(); uc.put(nam, 0);});
    	return uc;*/
    	Map<String,Integer> mp = new TreeMap<>();
    	List<String> allUsers = new ArrayList<String>();
    	news.stream().forEach(i->allUsers.add(i.getCommentByUser()));
    	for(String userName: allUsers) {
    		mp.put(userName,0);
    	}
    	for(String userName: allUsers) {
    		mp.put(userName,mp.get(userName)+1);
    	}
    	Map<String, Integer> mp2 = sortByValues(mp);
    	return mp2;
    	
    }

    public static void main(String[] args) {
    	/*
    	 *  News [newsId=1, postedByUser=Ajay, commentByUser=Prasanth, comment=comment]     
			News [newsId=2, postedByUser=Ajay1, commentByUser=Prasanth1, comment=budget]    
			News [newsId=1, postedByUser=Ajay2, commentByUser=Prasanth2, comment=comment]   
			News [newsId=3, postedByUser=Ajay3, commentByUser=Prasanth, comment=budget]     
			News [newsId=1, postedByUser=Ajay4, commentByUser=Prasanth2, comment=comment]   
			News [newsId=3, postedByUser=Ajay5, commentByUser=Prasanth, comment=budget]     
			News [newsId=1, postedByUser=Ajay6, commentByUser=Prasanth6, comment=comment] */
    	News n1 = new News(1,"Ajay","Prashanth","comment");
    	News n2 = new News(2,"Ajay1","Prashanth1","budget");
    	News n3 = new News(1,"Ajay2","Prashanth2","comment");
    	News n4 = new News(3,"Ajay3","Prashanth","budget");
    	News n5 = new News(1,"Ajay4","Prashanth2","comment");
    	News n6 = new News(3,"Ajay5","Prashanth","budget");
    	News n7 = new News(1,"Ajay6","Prashanth6","comment");
    	List<News> news = new ArrayList<News>();
    	news.add(n1);
    	news.add(n2);
    	news.add(n3);
    	news.add(n4);
    	news.add(n5);
    	news.add(n6);
    	news.add(n7);
    	// Find out newsId which has recieved maximum comments
    	int x = maxComments(news);
    	System.out.println("Maximum comments by news ID: "+x);
    	// Find out how many times the word 'budget' arrived in user comments all news.
    	int y = budgetCount(news);
    	System.out.println("Budget count is: "+ y);
    	// Find out which user has posted maximum comments.
    	String nameOfUser = maxCommentsByUser(news);
    	System.out.println("Maximum comments posted by user: "+nameOfUser);
    	// Display commentByUser wise number of comments.
    	Map<String,Integer> map = sortMaxCommentsByUser(news);
    	for(Map.Entry<String, Integer> mMap: map.entrySet()) {
    		System.out.println(mMap.getKey()+": "+mMap.getValue());
    	}
    }
}




//question 3



import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;


/*Setup:
	
	Create the following classes:
	
	class Trader { String name; String city; }
	
	Find Out:
	
	1. What are all the unique cities where the traders work?
	
	2. Find all traders from Pune and sort them by name.
	
	3. Return a string of all traders’ names sorted alphabetically.
	
	4. Are any traders based in Indore?*/
	


class Trader {
    private String name;
    private String city;
	public Trader(String name, String city) {
		super();
		this.name = name;
		this.city = city;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getCity() {
		return city;
	}
	public void setCity(String city) {
		this.city = city;
	}
	@Override
	public String toString() {
		return "Trader1{name=" + "'"+name+"'" + ", city=" + "'"+city +"'"+ "}";
	}
    
}

public class Assignment5Q3 {
    public static List<String> printUniqueCities (List <Trader> traders) { 
    	List<String> aCities = new ArrayList<>();
    	List<String> uCities = new ArrayList<>();
    	traders.stream().forEach(i->aCities.add(i.getCity()));
    	uCities = aCities.stream().distinct().collect(Collectors.toList());
    	return uCities;
    }

    public static List<String> trader2sFromPuneSortByName(List<Trader> traders) {
    	List<String> puneTraders = new ArrayList<>();
    	traders.stream().filter(i->i.getCity().equalsIgnoreCase("Pune")).forEach(i->puneTraders.add(i.getName()));
    	puneTraders.stream().sorted((t1,t2)->t1.compareTo(t2));
    	return puneTraders;
    	
    }
    public static String allTrader3Names(List<Trader> traders) {
    	List<String> aTraders = new ArrayList<>();
    	
    	traders.stream().forEach(i->aTraders.add(i.getName()));
    	aTraders.stream().sorted((t1,t2)->t1.compareTo(t2));
    	//StringBuilder sb = new StringBuilder();
    	//sb.append(aTraders);
    	String line="";
    	for(String s: aTraders) {
    		line+=s;
    	}
    	return line;
    }
    public static ArrayList<Trader> areAnyTrader4sFromIndore(ArrayList<Trader> traders) {
    	ArrayList<Trader> iTraders = new ArrayList<>();
    	iTraders = (ArrayList<Trader>) traders.stream().filter(i->i.getCity().equalsIgnoreCase("Indore")).collect(Collectors.toList());
    	return iTraders;
    }

    public static void main(String[] args) {}
    
}



question 4


import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

class Trader {
    private String name;
    private String city;
	public Trader(String name, String city) {
		super();
		this.name = name;
		this.city = city;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getCity() {
		return city;
	}
	public void setCity(String city) {
		this.city = city;
	}
	@Override
	public String toString() {
		return "Trader{name=" + "'"+name+"'" + ", city=" + "'"+city +"'"+ "}";
	}
    
}

class Transaction {
    private Trader trader;
    private int year;
    private int value;
	public Transaction(Trader trader, int year, int value) {
		super();
		this.trader = trader;
		this.year = year;
		this.value = value;
	}
	public Trader getTrader() {
		return trader;
	}
	public void setTrader(Trader trader) {
		this.trader = trader;
	}
	public int getYear() {
		return year;
	}
	public void setYear(int year) {
		this.year = year;
	}
	public int getValue() {
		return value;
	}
	public void setValue(int value) {
		this.value = value;
	}
	@Override
	public String toString() {
		return "Transaction{trader=" + trader + ", year=" + year + ", value=" + value + "}";
	}
    
}
public class Assignment5Q4 {
	//1. Find all transactions in the year 2011 and sort them by value (small to high).
    public static List<Transaction> sortTransactions(List <Transaction> transactions) {
    	List<Transaction> stage1 = new ArrayList<Transaction>();
    	List<Transaction> stage2 = new ArrayList<Transaction>();
    	stage1 = transactions.stream().filter(i->i.getYear()==2011).collect(Collectors.toList());
    	stage2 = stage1.stream().sorted((t1,t2)->t1.getValue()-t2.getValue()).collect(Collectors.toList());
    	return stage2;
    }

    //2. Print all transactions’ values from the traders living in Delhi.
    public static List<Integer> transaction3sValuesDelhi(List<Transaction> transactions) {
    	List<Transaction> seg = new ArrayList<>();
    	List<Integer> dTrans = new ArrayList<>();
    	seg = transactions.stream().filter(i->i.getTrader().getCity().contentEquals("Delhi")).collect(Collectors.toList());
    	seg.stream().forEach(i->dTrans.add(i.getValue()));
    	return dTrans;
    }
    //3. What’s the highest value of all the transactions?
    public static int highestTransaction2(List<Transaction> transactions){
    	Optional<Transaction> sG = transactions.stream().max(Comparator.comparing(Transaction::getValue));
    	Transaction obj = sG.stream().findFirst().get();
    	return obj.getValue();
    }

    public static int smallestTransaction1(List<Transaction> transactions){
    	Optional<Transaction> sG = transactions.stream().min(Comparator.comparing(Transaction::getValue));
    	Transaction obj = sG.stream().findFirst().get();
    	return obj.getValue();
    }

    public static void main(String[] args) {}
}




