Assignment 2

Question 1


class SingletonInheritanceCheck{ 
	private static SingletonInheritanceCheck instance =null;
	public String test;
	private SingletonInheritanceCheck() {
		test = "go away";
	}
	public static SingletonInheritanceCheck getInstance() {
		if(instance == null) {
			instance = new SingletonInheritanceCheck();
		}
		return instance;
	}
	
}

public class Assignment2Q1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}


Question 2


import java.util.ArrayList;

class Manager extends Assignment2Q2 {
	private int incentive = 5000;
    @Override
    public int getSalary(int salary) {
        //int incentive = 5000;
    	int mSalary = salary + incentive;
        
        return mSalary;
    }
}

class Labour extends Assignment2Q2 {
	private int overtime = 500;
    @Override
    public int getSalary(int salary) {
        //int overtime = 500;
        int lSalary = salary + overtime;
        return lSalary;
    }
}

public class Assignment2Q2 {
    int salary = 10000;
    public int getSalary(int salary){
    	this.salary = salary;
    	return salary;
    }
    public int totalEmployeesSalary(ArrayList<Integer> employeeSalaries){
    	int totalEmployeeSal = 0;
    	for(Integer i : employeeSalaries) {
    		totalEmployeeSal += i;
    	}
    	return totalEmployeeSal;
    }
    public static void main(String[] args) {
    	
    }
}


Question 3

import java.util.ArrayList;

class CurrentAccount extends Assignment2Q3 {
    int totalDeposits = 10000;
    int creditLimit = 2000;
    @Override
    public int getCash() {
    	int withdrawalCash = totalDeposits - creditLimit;
    	return withdrawalCash;
    }
}
class SavingsAccount extends Assignment2Q3 {
    int totalDeposits = 10000;
    int fixedDepositAmount = 5000;
    @Override
    public int getCash() {
    	int withdrawalCash = totalDeposits + fixedDepositAmount;
    	return withdrawalCash;
    }
}
public class Assignment2Q3 {
	int cashInBank = 0;
    public int totalCashInBank(ArrayList<Integer> cash){
    	int totalCash = 0;
    	for(int i : cash) {
    		totalCash += i;
    	}
    	cashInBank = totalCash;
    	return totalCash;
    }
    public int getCash(){
    	
    	return 0;
    }
    public static void main(String[] args) {
    	
    }
}


Question 4

abstract class AbstractCheck{
	public int variableOne = 2;
	public String str = "Hello";
	public void CompletedMethod() {
		int values = 100;
		System.out.println(values);
	}
	public abstract void inCompleteMethod();
	public abstract int inCompleteMethod2();
}

//abstract Method without anything inside
abstract class Abstract2{}

//implementing -> When we extend an abstract class, 
//we must either override all the abstract methods in sub class or declare subclass as abstract.

abstract class CheckExample extends AbstractCheck{}  		//we are not implementing the above unimplemented methods so, 
                                                    		//we have to declare this class too abstract
public class Assignment2Q4 extends AbstractCheck {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

	@Override
	public void inCompleteMethod() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public int inCompleteMethod2() {
		// TODO Auto-generated method stub
		return 0;
	}

}


Question 5

class Rectangle5 extends Shape5 {
    @Override
    public String draw() {
    	return "Rectangle";
    }
}

class Line5 extends Shape5{
    @Override
    public String draw() {
    	return "Line";
    }
}

class Cube5 extends Shape5 {
    @Override
    public String draw() {
    	return "Cube";
    }
}

abstract class Shape5 {
    abstract public String draw();
}

public class Assignment2Q5{
	
    public static void main(String[] args) {
    	
    }
}


Question 6


abstract class Persistence {
    abstract public String persist();
}
class FilePersistence extends Persistence{
    @Override
    public String persist() {
    	return "Available";
    }
}
class DatabasePersistence extends Persistence{
    @Override
    public String persist() {
    	return "Available";
    }
}
//Cannot make object of Persistence, because it is a abstract class.
class client extends Persistence{
	public String persist() {
    	return "Available";
    }
}


public class Assignment2Q6 {
    public static void main(String[] args) {}
}

Question 7


import java.util.Scanner;

abstract class DesertItem {

	abstract public int getCost();
}

class Candy extends DesertItem {
	int dollar = 60;
	int count = 0;

	public int addCandies(int candies) {
		count += candies;
		return candies;
	}

	public int getCost(int candies) {
		return dollar * candies / 10;
	}

	@Override
	public int getCost() {
		return 0;
	}

}

class Cookie extends DesertItem {
	int euro = 60;
	int count = 0;

	public int addCookies(int cookie) {
		count += cookie;
		return cookie;
	}

	public int getCost(int cookies) {
		return euro * cookies / 10;
	}

	@Override
	public int getCost() {
		return 0;
	}
}

class IceCream extends DesertItem {
	int rupees = 100;
	int count = 0;

	public int addIceCreams(int iceCream) {
		count += iceCream;
		return iceCream;
	}

	public int getCost(int iceCreams) {
		return rupees * iceCreams;
	}

	@Override
	public int getCost() {
		return 0;
	}
}

public class Assignment2Q7 {
	public static void main(String[] args) {
		Assignment2Q7 assignObj = new Assignment2Q7();
		assignObj.selectRoles();
	}
	
	private String role;

	private void selectRoles() {
		System.out.println("Enter the Role customer or owner?");
		Scanner sc = new Scanner(System.in);
		role = sc.nextLine();
		roles(role);
	}

	private void roles(String role) {
		if (role.matches("owner")) {
			addItems();
			Scanner sc = new Scanner(System.in);
			int item = sc.nextInt();
			addItemsOperation(item);
		} else {
			placeOrder();
			Scanner sc = new Scanner(System.in);
			int item = sc.nextInt();
			placeOrderOperation(item);
		}

	}

	private void addItems() {
		System.out.println("Select Item to Add : \n1. Candies\n2. Cookies\n3. Ice Creams");
	}

	private void addItemsOperation(int choice) {
		Scanner sc = new Scanner(System.in);
		switch (choice) {
		case 1:
			Candy candy = new Candy();
			System.out.println("How many candies you wanna add?");
			int candies = sc.nextInt();
			sc.close();
			candy.addCandies(candies);
			System.out.println(candy.count + " candies added");
			break;
		case 2:
			Cookie cookie = new Cookie();
			System.out.println("How many cookies you wanna add?");
			int cookies = sc.nextInt();
			sc.close();
			cookie.addCookies(cookies);
			break;
		case 3:
			IceCream iceCream = new IceCream();
			System.out.println("How many iceCreams you wanna add?");
			int iceCreams = sc.nextInt();
			sc.close();
			iceCream.addIceCreams(iceCreams);
		default:
			System.out.println("You have entered an invalid choise. Please enter the correct item");
			roles(role);
		}
		
	}

	private void placeOrder() {
		System.out.println("Select Item to Place Order: \n1. Candies\n2. Cookies\n3. Ice Creams");
	}

	private void placeOrderOperation(int choice) {
		Scanner sc = new Scanner(System.in);
		switch (choice) {
		case 1:
			Candy candy = new Candy();
			System.out.println("How many candies you wanna buy?");
			int candies = sc.nextInt();
			sc.close();
			System.out.println("Total price of " + candies + " candies is " + candy.getCost(candies) + " rupees");
			break;
		case 2:
			Cookie cookie = new Cookie();
			System.out.println("How many cookies you wanna buy?");
			int cookies = sc.nextInt();
			sc.close();
			System.out.println("Total price of " + cookies + " cookies is " + cookie.getCost(cookies) + " rupees");
			break;
		case 3:
			IceCream iceCream = new IceCream();
			System.out.println("How many iceCreams you wanna buy?");
			int iceCreams = sc.nextInt();
			sc.close();
			System.out.println(
					"Total price of " + iceCreams + " iceCreams is " + iceCream.getCost(iceCreams) + " rupees");
			break;
		default:
			System.out.println("You have entered an invalid choise. Please enter the correct item");
			roles(role);
		}
	}
}
